use sys;

-- Create table
create table STAFF (
	FIRST_NAME VARCHAR(50) NOT NULL, -- ORACLE use VARCHAR2 to define String
    LAST_NAME VARCHAR(50) NOT NULL,
    EMAIL_ADDR VARCHAR(50), -- NULLABLE
    AGE NUMERIC(3),
    SALARY NUMERIC(11, 2), -- 2 DECIMAL PLACES
    YEAR_OF_EXP INTEGER(3)
);

SELECT * FROM STAFF;

--  INSERT INTO
INSERT INTO STAFF VALUES ('JOHN','LAU','johnlau@gmail.com', 23, 20000, 2);
INSERT INTO STAFF (FIRST_NAME, LAST_NAME) VALUES ('MARY', 'WONG');
-- INSERT INTO STAFF VALUES ('MARY', 'WONG'); -- ERROR, doesn't know which column refer to 
SELECT * FROM STAFF;
SELECT * FROM STAFF WHERE FIRST_NAME = 'JOHN'; -- 1 RECORD
SELECT * FROM STAFF WHERE FIRST_NAME = 'JOHN' OR FIRST_NAME = 'MARY'; -- 2 RECORDS
SELECT * FROM STAFF WHERE FIRST_NAME = 'JOHN' AND AGE = 23; -- 1 RECORD
SELECT * FROM STAFF WHERE FIRST_NAME = 'JOHN' AND AGE = 24; -- 0 RECORD
SELECT * FROM STAFF WHERE AGE > 20; -- 1 RECORD, MARY CANNOT RETURN, age = null

INSERT INTO STAFF (FIRST_NAME, LAST_NAME, EMAIL_ADDR, AGE, SALARY, YEAR_OF_EXP) 
	VALUES ('ALEX', 'CHEUNG', 'alexcheung@gmail.com', 32, 40000, 10);
SELECT * FROM STAFF; -- 3 RECORDS;

UPDATE STAFF SET SALARY = SALARY + 3000 WHERE FIRST_NAME = 'JOHN';
SELECT * FROM STAFF WHERE SALARY > 21000; -- 2 RECORDS

DELETE FROM STAFF WHERE LAST_NAME = 'LAU';
SELECT * FROM STAFF WHERE LAST_NAME = 'LAU'; -- 0 RECROD
SELECT * FROM STAFF WHERE AGE IS NULL; -- 1 RECORD, MARY

UPDATE STAFF SET AGE = AGE + 1, YEAR_OF_EXP = 4 WHERE FIRST_NAME = 'ALEX';
SELECT * FROM STAFF;

--  ADD COLUMN TO EXISTING TABLE
ALTER TABLE STAFF ADD COLUMN STAFF_ID NUMERIC(3);
UPDATE STAFF SET STAFF_ID = 1 WHERE FIRST_NAME = 'ALEX';
UPDATE STAFF SET STAFF_ID = 2 WHERE FIRST_NAME = 'MARY';
SELECT * FROM STAFF;

--  TWO MORE TABLE
CREATE TABLE STAFF_AWARD (
	STAFF_ID NUMERIC(3),
    AWARD_YEAR NUMERIC(4),
    AWARD_ID NUMERIC(2)
);
CREATE TABLE AWARD (
	AWARD_ID NUMERIC(2),
    AWARD_DESC VARCHAR(100)
);
INSERT INTO AWARD VALUES (1, '5 YEARS EXP');
INSERT INTO AWARD VALUES (2, '10 YEARS EXP');

INSERT INTO STAFF_AWARD VALUES (1, 2018, 1);
INSERT INTO STAFF_AWARD VALUES (1, 2023, 2);
INSERT INTO STAFF_AWARD VALUES (2, 2022, 1);

--  JOIN TABLE
--  Requirement: show all staff who are having award (select their first_name, last_name, staff_id, award_id)
SELECT s.FIRST_NAME, s.LAST_NAME, s.STAFF_ID, a.AWARD_ID, a.AWARD_YEAR
FROM STAFF s, STAFF_AWARD a
WHERE s.STAFF_ID = a.STAFF_ID;

--  sub-query
UPDATE STAFF SET SALARY = SALARY + 1000 WHERE STAFF_ID IN (SELECT STAFF_ID FROM STAFF_AWARD WHERE AWARD_ID = 2);
SELECT * FROM STAFF;

--  count the number of record in the table
SELECT COUNT(FIRST_NAME) FROM STAFF;
SELECT 1 FROM STAFF;
SELECT COUNT(1) FROM STAFF;

--  DISTINCT: REMOVE DUPLICATED DATA 
--  The staff who has any award
SELECT DISTINCT STAFF_ID FROM STAFF_AWARD;

--  AVG, average of salary in staff table
UPDATE STAFF SET SALARY = 30000 WHERE FIRST_NAME = 'MARY';
SELECT AVG(SALARY) FROM STAFF;

--  change the definition of columns
ALTER TABLE STAFF MODIFY EMAIL_ADDR VARCHAR(80);
SELECT * FROM STAFF;

--  DROP column
ALTER TABLE STAFF ADD COLUMN TEST_COL VARCHAR(5);
ALTER TABLE STAFF DROP COLUMN TEST_COL;

--  DROP TABLE
CREATE TABLE TEST_TABLE (
	TEST_COL VARCHAR(2)
);
DROP TABLE TEST_TABLE;

--  TRUNCATE
CREATE TABLE TEST_TABLE (
	TEST_COL VARCHAR(2)
);
INSERT INTO TEST_TABLE VALUES ('T1');
INSERT INTO TEST_TABLE VALUES ('T2');
TRUNCATE TABLE TEST_TABLE; -- DELETE FROM TEST_TABLE;

--  MAX/ MIN
SELECT MAX(SALARY) FROM STAFF;
SELECT MIN(SALARY) FROM STAFF;

--  MATH OPERATORS
SELECT SALARY / 2 FROM STAFF;
SELECT SALARY * 2 FROM STAFF;

--  ALIAS S = STAFF TABLE
SELECT S.*, S.SALARY / 2 FROM STAFF S;

--  DDL (Structure Change)/ DML (Data Change)
--  data definition language (DDL) and data manipulation language (DML).
--  DDL = CREATE/ DROP/ ALTER TABLE (ADD/ MODIFY/ DROP)/ TRUNCATE
--  DML = INSERT INTO/ UPDATE/ DELETE FROM

--  Add column DEPT varchar 20 to table staff
ALTER TABLE STAFF ADD COLUMN DEPT VARCHAR(20);
--  UPDATE COLUMN DEPT
UPDATE STAFF SET DEPT = 'ACC' WHERE STAFF_ID = 1;
UPDATE STAFF SET DEPT = 'HR' WHERE STAFF_ID = 2;

SELECT * FROM STAFF ORDER BY SALARY; -- SAME AS ASC
SELECT * FROM STAFF ORDER BY SALARY ASC; -- ASCENDING ORDER
SELECT * FROM STAFF ORDER BY SALARY DESC; -- DESCENDING ORDER

--  ORDER BY
INSERT INTO STAFF VALUES ('SALLY', 'LAU', 'sally@gmai.com', 40, 30000, 10, 3, 'HR');
SELECT * FROM STAFF ORDER BY SALARY DESC, FIRST_NAME DESC; -- FIRST SORY BY SALARY IN DECENDING, THEN SORT BY FIRST NAME IN DESCENDING ORDER
SELECT * FROM STAFF WHERE DEPT = 'HR' ORDER BY SALARY DESC, FIRST_NAME DESC;

--  GROUP BY
SELECT DEPT, COUNT(1) AS NUMBER_OF_STAFF FROM STAFF GROUP BY DEPT;
INSERT INTO STAFF VALUES ('TOMMY', 'LAU', 'TOMMY@gmail.com', 35, 40000, 10, 4, 'HR');

SELECT DEPT, LAST_NAME, COUNT(1) AS NUMBER_OF_STAFF 
FROM STAFF 
GROUP BY DEPT, LAST_NAME 
ORDER BY DEPT, NUMBER_OF_STAFF DESC;

SELECT S.*, A.AWARD_YEAR, D.AWARD_DESC
FROM STAFF S
JOIN STAFF_AWARD A ON S.STAFF_ID = A.STAFF_ID
JOIN AWARD D ON A.AWARD_ID = D.AWARD_ID
WHERE A.AWARD_YEAR > 2020
ORDER BY A.AWARD_YEAR DESC;

-- commit;
SELECT * FROM STAFF;
UPDATE STAFF SET SALARY = 44000 WHERE FIRST_NAME = 'ALEX';
COMMIT;
ROLLBACK;

SELECT * FROM STAFF_AWARD;
update STAFF_AWARD set award_id = 3 where staff_id = 2; -- this update will fail IF we define STAFF_AWARD.AWARD_ID as foreign key